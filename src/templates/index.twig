{# @var craft \craft\web\twig\variables\CraftVariable #}
{#
/**
 * craft-deploy plugin for Craft CMS 3.x
 *
 * craft-deploy index.twig
 *
 * @author        dilewe
 * @copyright Copyright (c) 2021 dilewe
 * @link            dilewe.de
 * @package     Craftdeploy
 * @since         1.0.0
 */
#}

{% extends "_layouts/cp" %}
{% import "_includes/forms" as forms %}

{# {% do view.registerAssetBundle("dilewe\\craftdeploy\\assetbundles\\craftdeploy\\CraftdeployAsset") %} #}
{% do view.registerAssetBundle("dilewe\\release\\assetbundles\\verffentlichencpsection\\VerffentlichenCPSectionAsset") %}

{# Link for the ? icon at the bottom of the page #}
{% set docsUrl = "https://github.com/dilewe/release/blob/master/README.md" %}

{# The title of this CP section #}
{% set title = "Veröffentlichen" %}

{# The URL to this plugin's base CP section #}
{% set pluginCpUrl = url('craft-deploy') %}

{# Get a URL to an image in our AssetBundle #}
{% set iconUrl = view.getAssetManager().getPublishedUrl('@dilewe/release/assetbundles/verffentlichencpsection/dist', true) ~ '/img/icon.svg' %}

{# Content that should appear in the page header#}
{% set extraPageHeaderHtml %}
	<div class="buttons">
		<a href="{{ pluginCpUrl }}" class="btn submit add icon">{{ "Click Me!"|t('craft-deploy') }}</a>
	</div>
{% endset %}

{# The content of the CP Section#}
{% set content %}

<style>
	:root {
		--dlw-color: #1E3E51;
	}
	.progress {
		width: 99%;
		background-color: grey;
		color: white;
		margin: 20px auto;
	}
	.bar {
		width: 100%;
		height: 30px;
		background-color: grey;
		text-align: center;
		line-height: 30px;
		color: white;
		overflow: hidden;
	}
	.bar::after {
		content: "";
		background-image: url("{{ iconUrl }}");
		background-size: contain;
		width: 30px;
		height: 30px;
	}
	.button {
		display: block;
		margin: 5px;
		border: 1px solid var(--dlw-color);
		border-radius: 5px;
		padding: 5px 10px;
		background-color: var(--dlw-color);
		color: white;
		font-size: 28px;
	}
	.statusText {
		margin: 5px 0;
	}
	.seperator {
		display: block;
		width: 100%;
		height: 3px;
		border-bottom: 1px solid grey;
		margin: 20px auto;
	}
	label[for="deployments"] {
		font-size: 28px;
		margin: 10px 0 5px 10px;
	}
	select[name="deployments"] {
		margin: 10px 0 5px 10px;
		font-size: 24px;
	}
</style>


{# <form method="post" accept-charset="UTF-8">
	{{ csrfInput() }}
	<input type="hidden" name="action" value="craft-deploy/deploy/deploy">
	<button class="btn submit" type="submit">{{'Do it'|t('craft-deploy')}}</button>
</form> #}

<p>hier kann die Veröffentlichung gestartet werden:</p>
<button id="deploy" class="button">Veröffentlichen</button>

<div class="progress">
	<div class="bar">chille -.- zZZ</div>
</div>

<span class="statustext"></span>

<div class="seperator"></div>

<p>hier kann die Veröffentlichung zurückgesetzt werden:</p>

<label for="deployments">Älteren Zustand wiederherstellen:</label>
<select name="deployments" id="deployments">
	<optgroup label="Altere Deployments">
	<option value="null">keines</option>
	</optgroup>
</select>

<button id="restore" class="button">wiederherstellen</button>

<div class="seperator"></div>

<p>dev-tools:</p>
<button id="failure" class="button">(Failure)</button>



<script>
	const deployButton = document.getElementById("deploy");
	const bar = document.querySelector(".bar");
	const progress = document.querySelector(".progress");
	const statusText = document.querySelector(".statustext");
	const failureButton = document.getElementById("failure");
	const restoreButton = document.getElementById("restore");
	const optGroup = document.querySelector("#deployments optgroup");
	const locationDep = "http://localhost:5000";

	let jsonId = {};

	const startDeploy = async( url = "" ) => {

	progress.style.display = "block";
	bar.style.width = "100%";
	bar.innerText = "gestartet";
	bar.style.backgroundColor = "#257DA7";

	try {

		const response = await fetch(url, { method:"POST", body: JSON.stringify({ "action": "deploy"})})

		if(response.status === 200) {
		jsonId = await response.json();

		const getStatus = async( url = "", id = "" ) => {
			const response = await fetch(url, { method:"POST", body: JSON.stringify({ "action": "status", "id": id })});
			if(response.status === 200) {
			const jsonStatus = await response.json();
			if (jsonStatus) {
				if (jsonStatus.status === "complete") {
				clearInterval(ping);
				bar.innerText = "Fertig!";
				bar.style.backgroundColor = "#77962E";
				bar.style.width = "100%";
				deployButton.style.display = "block";
				};
				if (jsonStatus.status === "running") {
				console.log(jsonStatus);
				setBar(jsonStatus.progress);
				statusText.style.display = "none";
				}
				if (jsonStatus.status === "error") {
				clearInterval(ping);
				deployButton.style.display = "block";
				bar.innerHTML = "FEHLER";
				bar.style.backgroundColor = "red";
				console.log(jsonStatus);
				};
				if (jsonStatus.status === "stopped") {
				clearInterval(ping);
				deployButton.style.display = "block";
				bar.innerHTML = "Abgebrochen";
				bar.style.width = "100%";
				bar.style.backgroundColor = "grey";
				};
			}
			}
		}
		const Status = () => {
			getStatus(locationDep, jsonId.id);
		}
		const ping = setInterval(Status, 1000);
		}
	} catch (error) {
		console.log(error);
		bar.innerHTML = "FEHLER";
		bar.style.backgroundColor = "red";
	}
	}


	const setBar = percent => {
	if (percent > 0) {
		progress.style.display = "block";
	}
	bar.style.width = percent + "%";
	bar.innerHTML = percent + "%";
	if (percent > 99) {
		progress.style.display = "none";
	}
	}

	deployButton.addEventListener("click", () => {
	startDeploy(locationDep);
	})

	const startFailure = async( url = "", id ) => {
	console.log(id);
	const response = await fetch(url, { method:"POST", body: JSON.stringify({ "action": "cancel", "id": id})});
	const json = await response.json();
	}

	failureButton.addEventListener("click", () => {
	if (jsonId.id) {
		// console.log(jsonId);
		startFailure(locationDep, jsonId.id);
	}
	});


	restoreButton.addEventListener("click", async () => {
	const release = optGroup.parentElement.value;
	await doAction("restore", { release });
	
	})

	const doAction = async ( action, data = {} ) => {
	const response = await fetch(locationDep, { method:"POST", body: JSON.stringify({ action, ...data })});
	if(response.status === 200) {
		const data = await response.json();
		if (data) {
		return data;
		}
	}
	}

	const askDeployments = async() => {
	const data = await doAction("releaseList");
	optGroup.innerHTML = "";
	
	for ( let i = 0; i <    data.releases.length; i++) {
		const option = document.createElement("OPTION");
		const dateOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
		option.value = data.releases[i];
		option.innerHTML = new Date(data.releases[i]).toLocaleDateString('de-DE', dateOptions);
		optGroup.append(option);
	}
	}

	setTimeout(() => {
	askDeployments();
	}, 0);


	// 
</script>




{% endset %}
